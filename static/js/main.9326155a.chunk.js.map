{"version":3,"sources":["App.js","index.js"],"names":["App","useState","cidade","setCidade","clima","setClima","obtendoclima","setObtendoclima","erro","setErro","erroGeo","SetErroGeo","a","process","urlClima","fetch","then","response","json","data","cod","catch","error","console","mesage","useEffect","apigeo","latitude","longitude","url","results","components","city","country","message","navigator","geolocation","getCurrentPosition","position","obtemCidade","coords","code","Navbar","bg","Brand","href","Nav","className","Link","Form","inline","FormControl","type","value","placeholder","onChange","event","target","Button","variant","onClick","obtemClima","disabled","length","Spinner","size","animation","color","Jumbotron","Alert","onClose","dismissible","Heading","texto","Toast","onclose","delay","autohide","Header","Body","Row","Card","name","main","temp","temp_min","temp_max","Img","src","weather","icon","tittle","description","Title","Footer","Date","dt","toLocaleString","timeZone","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9326155a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Button from 'react-bootstrap/Button'\nimport Row from 'react-bootstrap/Row'\nimport Card from 'react-bootstrap/Card'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Toast from 'react-bootstrap/Toast'\nimport Alert from 'react-bootstrap/Alert'\n\n\nimport { FaCloudversify, FaCloudRain, FaArrowDown, FaArrowUp } from 'react-icons/fa'\n\nfunction App() {\n  const [cidade, setCidade] = useState('')\n  const [clima, setClima] = useState(null)\n  const [obtendoclima, setObtendoclima] = useState(false)\n  const [erro, setErro] = useState(null)\n  const [erroGeo, SetErroGeo] = useState(null)\n\n  const listaErrosGeo = [{\"codigo\":1, \"texto\": \"N√£o foi dada permiss√£o para o sistema encontrar a sua localiza√ß√£o\"},\n                         {\"codigo\":2, \"texto\": \"N√£o foi poss√≠vel obter sua localiza√ß√£o\"},\n                         {\"codigo\":3, \"texto\": \"O Tempo para obter a sua localiza√ß√£o foi expirado\"}]\n\n  useEffect(()=>{\n    const apigeo = process.env.REACT_APP_APIGEO\n    if('geolocation' in navigator){\n      navigator.geolocation.getCurrentPosition(function (position) {\n        //console.log(position)\n        obtemCidade(position.coords.latitude, position.coords.longitude)\n      }, function (error){\n        console.error(error)\n        SetErroGeo(error.code)\n      })\n    }\n    async function obtemCidade(latitude, longitude) {\n      let url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apigeo}`\n      await fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          //console.log(data)\n          setCidade(data.results[0].components.city+', '+data.results[0].components.country)\n        })\n        .catch(function (error) {\n          console.error(`N√£o foi possivel buscar a cidade a partir da lat/long. Erro: ${error.message}`)\n        })\n    }\n  },[])\n\n  async function obtemClima(cidade) {\n    setObtendoclima(true)\n    const apiweather = process.env.REACT_APP_APIWEATHER\n    let urlClima = `http://api.openweathermap.org/data/2.5/weather?q=${cidade}&lang=pt&units=metric&appid=${apiweather}`\n    await fetch(urlClima)\n      .then(response => response.json())\n      .then(data => {\n        switch (data.cod) {\n          case '401':\n            setErro('A API KEY informada √© inv√°lida')\n            setClima(null)\n            break\n          case '404':\n            setErro('A cidade informada n√£o existe')\n            setClima(null)\n            break\n          case '429':\n            setErro('O uso gratuito da API foi excedido! (60 chamadas por minuto)')\n            setClima(null)\n            break\n          default:\n            setClima(data)\n        }\n      })\n      .catch(function (error) {\n        console.error(`Erro ao obter o clima: ${error.mesage}`)\n      })\n    setObtendoclima(false)\n  }\n\n  return (\n    <> {/*React Fragment*/}\n      <Navbar bg=\"primary\">\n        <Navbar.Brand href=\"#inicio\">Fateclima</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#inicio\"> Inicio</Nav.Link>\n          <Nav.Link href=\"#contato\">Contato</Nav.Link>\n        </Nav>\n        <Form inline>\n          <FormControl type=\"text\" value={cidade} placeholder=\"Informe a cidade...\"\n            onChange={event => setCidade(event.target.value)} />\n          &nbsp;\n          <Button variant=\"secondary\" onClick={() => obtemClima(cidade)} disabled={cidade.length < 3} >\n            {obtendoclima ? <Spinner size=\"sm\" animation=\"grow\" /> : <FaCloudversify color=\"#000000\" size=\"20\" />}\n             Obter Clima</Button>\n        </Form>\n      </Navbar>\n      <Jumbotron>\n        <h1><FaCloudRain />FateClima</h1>\n        <p>\n          Consulte o clima de qualquer cidade do mundo. <br></br>\n        App desenvolvido em ReactJS e integrado com a API OpenWheaterMap.\n      </p>\n      </Jumbotron>\n      {erroGeo &&\n        <Alert variant=\"danger\" onClose={()=> SetErroGeo(null)} dismissible>\n          <Alert.Heading>Ops! Ocorreu um erro ao obter a sua localiza√ß√£o.</Alert.Heading>\n          <p>{listaErrosGeo[erroGeo].texto}</p>\n        </Alert>\n      }\n\n      {erro &&\n        <Toast onclose={() => setErro(null)} delay={4000} autohide className=\"bg-danger\">\n          <Toast.Header>\n            <strong className=\"mr-auto\">{erro}</strong>\n            <small>üò•s</small>\n          </Toast.Header>\n          <Toast.Body className=\"bg-white text-danger\">Por favor, fa√ßa uma nova busca.</Toast.Body>\n        </Toast>\n      }\n\n      {obtendoclima &&\n        <Row className=\"justify-content-center\">\n          <Spinner animation=\"border\" variant=\"primary\" />\n        </Row>\n      }\n\n      <Row className=\"justify-content-center\">\n        {clima &&\n          <Card bg=\"primary\" className=\"text-center\">\n            <Card.Header>\n              <h2>{clima.name}</h2>\n              <h3> <strong>{clima.main.temp}</strong>&#x2103;</h3>\n              <h5>min:  <strong>{clima.main.temp_min}</strong>&#x2103;<FaArrowDown className=\"text-danger\" />\n            - max: <strong>{clima.main.temp_max}</strong>&#x2103; <FaArrowUp className=\"text-success\" /></h5>\n            </Card.Header>\n            <Card.Body className=\"bg-white\">\n              <Card.Img src={`http://openweathermap.org/img/wn/${clima.weather[0].icon}@4x.png`}\n                tittle={clima.weather[0].description} />\n\n              <Card.Title className=\"text-dark\">{clima.weather[0].description}</Card.Title>\n            </Card.Body>\n\n            <Card.Footer className=\"text-white\">\n              Atualizado em: {new Date(clima.dt * 1000).toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}\n            </Card.Footer>\n          </Card>\n        }\n      </Row>\n    </>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}